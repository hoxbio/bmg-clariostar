package bmg

import (
	"math"
	"slices"
	"testing"
)

var absExp = []byte{
	0x4, 0x31, 0xe8, 0x21, 0x64, 0x5, 0x9e, 0x4, 0x64, 0x2c, 0x4a, 0x1d, 0x0, 0xc, 0x8,
	0xff, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x12, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	0x27, 0xf, 0x27, 0xf, 0x19, 0x4, 0x8, 0xfc, 0xa, 0x28, 0xa, 0xf0, 0xd, 0x48, 0x0, 0x0, 0x0, 0x64,
	0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1,
	0x0, 0x0, 0x0, 0x1, 0x0, 0x16, 0x0, 0x1, 0x0, 0x0,
}

func TestAbsRunDiscrete(t *testing.T) {

	pl := PlateCfg{
		Length:      12776,
		Width:       8548,
		CornerX:     1438,
		CornerY:     1124,
		Cols:        12,
		Rows:        8,
		Wells:       [48]byte{0xff},
		StartCorner: TopLeft,
	}
	abs := DiscreteAbs{
		Wavelengths:  []int{230, 260, 280, 340},
		Flashes:      22,
		SettlingTime: 1,
	}
	rc := RunCfg{Plate: pl}

	b, err := absDiscreteBytes(rc, abs)
	if err != nil {
		t.Fatalf("failed building bytes: %s", err)
	}

	if !slices.Equal(b, absExp) {
		t.Fail()
	}
}

var absUnmarshalData = []byte{
	0x02, 0x05, 0x06, 0x26, 0x00, 0x00, 0x29, 0x00, 0x3C, 0x00, 0x3C, 0x00, 0x1D, 0xFF, 0xE2, 0x02,
	0x00, 0x05, 0x00, 0x01, 0x00, 0x08, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x2F, 0x00, 0x00, 0x32, 0x4C, 0x00, 0x00, 0x32, 0x1C,
	0x00, 0x00, 0x24, 0x7B, 0x00, 0x00, 0x2F, 0x89, 0x00, 0x00, 0x2D, 0x7E, 0x00, 0x00, 0x35, 0x06,
	0x00, 0x00, 0x35, 0x4A, 0x00, 0x21, 0xEE, 0x3F, 0x00, 0x24, 0x72, 0x4D, 0x00, 0x23, 0x89, 0x31,
	0x00, 0x23, 0x40, 0x24, 0x00, 0x24, 0xCF, 0x56, 0x00, 0x24, 0x40, 0x7C, 0x00, 0x24, 0x61, 0x31,
	0x00, 0x24, 0x6F, 0x2E, 0x00, 0x81, 0xED, 0xD1, 0x00, 0x8B, 0xD5, 0x46, 0x00, 0x89, 0xB2, 0xBF,
	0x00, 0x89, 0x9D, 0xE9, 0x00, 0x8C, 0x7D, 0x86, 0x00, 0x8B, 0xCC, 0xF3, 0x00, 0x8B, 0x8A, 0x5C,
	0x00, 0x8B, 0x95, 0xB6, 0x00, 0x00, 0xE8, 0x05, 0x00, 0x00, 0xE8, 0x77, 0x00, 0x00, 0xE8, 0x60,
	0x00, 0x00, 0xE7, 0x98, 0x00, 0x00, 0xE8, 0x40, 0x00, 0x00, 0xE7, 0xC4, 0x00, 0x00, 0xE7, 0xD8,
	0x00, 0x00, 0xE7, 0xB6, 0x00, 0x3F, 0x9E, 0x9E, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF6, 0x45, 0x80,
	0x00, 0x00, 0x00, 0x0B, 0x00, 0xD3, 0x12, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x61, 0x55,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x96, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE7, 0xC7,
	0x00, 0x00, 0x00, 0x00, 0x00,
}

func TestUnmarshalAbsData(t *testing.T) {

	d, err := unmarshalAbsData(absUnmarshalData)
	if err != nil {
		t.Fatal(err)
	}

	if !fcmp(float64(d.Transmission[0][4]), 82.88938, 0.001) ||
		!fcmp(float64(d.Transmission[7][4]), 89.168, 0.001) ||
		!fcmp(float64(d.Transmission[0][0]), 0, 0.001) {
		t.Fail()
	}

}

func fcmp(a, b float64, p float64) bool {
	return !(math.Abs(a-b) > p)
}
